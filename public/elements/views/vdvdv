<link rel="import" href="../../bower_components/polymer/polymer.html">
<link rel="import" href="../../bower_components/iron-ajax/iron-ajax.html">
<link rel="import" href="../../elements/eight-widgets-card/eight-widgets-card.html">
<link rel="import" href="../../elements/detail-info-card/detail-info-card.html">
<link rel="import" href="../../elements/op-time-card/op-time-card.html">
<link rel="import" href="../../elements/cop/rt-cop-card.html">
<link rel="import" href="../../elements/cop/av-monthly-cop-card.html">
<link rel="import" href="../../bower_components/px-card/px-deck.html">
<dom-module id="demoboards-view">
  <template>

    <px-deck>
    	<div>
    		<eight-widgets-card id="eight-widgets-card"></eight-widgets-card>
    	</div>
			<div>
				<op-time-card id="op-time-card"></op-time-card>
			</div>
			<div>
				<detail-info-card id="detail-info-card"></detail-info-card>
			</div>
			<div>
				<rt-cop-card id="rt-cop-card"></rt-cop-card>
				<av-monthly-cop-card id="av-monthly-cop-card"></av-monthly-cop-card>
			</div>
    </px-deck>
  </template>
  <script>
    Polymer({

      is: 'demoboards-view',

      properties: {
        _decks: {
          type: Array,
          computed: '_computeDecks(_decksResponse)'
        },
        _initialBrowserContext: {
          type: Object,
          computed: '_computeInitialBrowserContext(_browserContext)'
        },
        _nodeUri: {
          type: String
        },
        _decksUrl: {
          type: String,
          computed: '_computeDecksUrl(_selectedContextTag, viewServiceBaseUrl)'
        },
        _selectedContextTag: {
          type: String,
          value: ''
        },
        viewServiceBaseUrl: {
          type: String,
          value: '/api/view-service/'
        },
        _selectedDeckId: {
          type: String,
          computed: '_computeSelectedDeckId(_selectedDeck)'
        }
      },

      _computeDecksUrl: function() {
        if(this._selectedContextTag) {
          return this.viewServiceBaseUrl + "decks?tag=" + this._selectedContextTag;
        } else {
          return this.viewServiceBaseUrl + "decks";
        }
      },

      _computeSelectedDeckId: function() {
        if(this._selectedDeck) {
          return this._selectedDeck.id;
        }
      },

      ready: function ready() {
        //this.$.decksIronAjax.generateRequest();
      },

      _computeDecks: function() {
        var decks = [];
        if (this._decksResponse && this._decksResponse.length > 0) {
          this._decksResponse.forEach(function(deck) {
            decks.push({ name: deck.title, id: deck.id });
          });
        };
        return decks;
      },

      _computeInitialBrowserContext: function(_browserContext) {
        if(typeof this._initialBrowserContext !== 'object') {
          return _browserContext;
        } else {
          return this._initialBrowserContext;
        }
      },

      // "getChildren" handler for px-context-browser
      // this function is passed into
      _getChildren: function(node) {
        var that = this;
        return new Promise(function(resolve, reject) {
          var req = new XMLHttpRequest();
          req.open('GET', '/api/predix-asset' + node.uri);

          req.onload = function() {
            if (req.status === 200) {
              that._nodeUri = node.uri;
              // that._computeDecks();
              resolve(JSON.parse(req.response));
            } else {
              reject(req.statusText);
            }
          };

          req.onError = function() {
            reject("Network Error");
          };

          req.send()
        });
      },

      _itemOpenHandler: function(item) {
        this._selectedContextTag = item.id;
        this.$.decksIronAjax.generateRequest();
      },
	behaviors:[px.deck]
    });
  </script>
</dom-module>